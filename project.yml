:project:
   :use_exceptions: FALSE
   :use_test_preprocessor: TRUE
   :use_auxiliary_dependencies: TRUE
   :build_root: build
   :release_build: TRUE
   :test_file_prefix: test_

:release_build:
   :output: huffman
   :use_assembly: FALSE

:environment:
   - :ld_library_path: /usr/local/lib

:extension:
   :executable: .out

:paths:
   :test:
      - +:test/**
      - -:test/support
   :source:
      - src/**
   :support:
      - test/support
   :include:
      - /usr/local/include/SDL2
   :libraries:
      - /usr/local/lib

:defines:
  # in order to add common defines:
  #  1) remove the trailing [] from the :common: section
  #  2) add entries to the :common: section (e.g. :test: has TEST defined)
   :commmon: &common_defines []
   :test:
      - *common_defines
      - TEST
   :test_preprocess:
      - *common_defines
      - TEST

:cmock:
   :mock_prefix: mock_
   :when_no_prototypes: :warn
   :enforce_strict_ordering: TRUE
   :plugins:
      - :ignore
      - :callback

   :treat_as:
      uint8:    HEX8
      uint16:   HEX16
      uint32:   UINT32
      int8:     INT8
      bool:     UINT8


:flags:
   :test:
      :compile:
         :huffman:
            -Wall
            -Wextra
            -pedantic
            -ansi
            -O2
            -Wfloat-equal

   :release:
      :compile:
         :*:
            -O3
            -std=c99
:PKGCONFIG: sdl2

:tools:
   :test_compiler:
      :executable: gcc
      :arguments:
         - -I"$": COLLECTION_PATHS_TEST_TOOLCHAIN_INCLUDE
         - -I"$": COLLECTION_PATHS_TEST_SUPPORT_SOURCE_INCLUDE_VENDOR
         - -D$: COLLECTION_DEFINES_TEST_AND_VENDOR
         - "#{`pkg-config #{PKGCONFIG} --cflags-only-other`}"
         - -c ${1}
         - -o ${2}
         - -g
         - ${4}

   :test_linker:
      :executable: gcc
      :arguments:
         - ${1}
         - -o "${2}"
         - -L$: PATHS_LIBRARIES
         - "#{`pkg-config #{PKGCONFIG} --libs`}"


   :release_compiler:
      :executable: gcc
      :arguments:
         - -I"$": COLLECTION_PATHS_SOURCE_INCLUDE_VENDOR
         - -I"$": COLLECTION_PATHS_RELEASE_TOOLCHAIN_INCLUDE
         - -D$: COLLECTION_DEFINES_RELEASE_AND_VENDOR
         - "#{`pkg-config #{PKGCONFIG} --cflags-only-other`}"
         - -DGNU_COMPILER
         - -c ${1}
         - -o ${2}
         - ${4}

   :release_linker:
      :executable: gcc
      :arguments:
         - ${1}
         - -o "${2}"
         - "#{`pkg-config #{PKGCONFIG} --libs`}"

# Ceedling defaults to using gcc for compiling, linking, etc.
# As [:tools] is blank, gcc will be used (so long as it's in your system path)
# See documentation to configure a given toolchain for use

:plugins:
   :load_paths:
      - vendor/ceedling/plugins
   :enabled:
      - stdout_pretty_tests_report
      - module_generator
